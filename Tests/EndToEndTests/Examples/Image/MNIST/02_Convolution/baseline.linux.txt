CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.cntk currentDirectory=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData RunDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu DataDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- trainNetwork=[SGD=[maxEpochs=6]]
-------------------------------------------------------------------
Build info: 

		Built time: Sep  6 2016 10:03:39
		Last modified date: Tue Sep  6 10:02:09 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-5.1
		Build Branch: HEAD
		Build SHA1: 208270d8f2e007f1da109a12d2db741bb172ee8e
		Built by philly on bba8a3f9d1fe
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
09/06/2016 15:15:02: Redirecting stderr to file -_trainNetwork_testNetwork.log
09/06/2016 15:15:02: -------------------------------------------------------------------
09/06/2016 15:15:02: Build info: 

09/06/2016 15:15:02: 		Built time: Sep  6 2016 10:03:39
09/06/2016 15:15:02: 		Last modified date: Tue Sep  6 10:02:09 2016
09/06/2016 15:15:02: 		Build type: release
09/06/2016 15:15:02: 		Build target: GPU
09/06/2016 15:15:02: 		With 1bit-SGD: no
09/06/2016 15:15:02: 		Math lib: mkl
09/06/2016 15:15:02: 		CUDA_PATH: /usr/local/cuda-7.5
09/06/2016 15:15:02: 		CUB_PATH: /usr/local/cub-1.4.1
09/06/2016 15:15:02: 		CUDNN_PATH: /usr/local/cudnn-5.1
09/06/2016 15:15:02: 		Build Branch: HEAD
09/06/2016 15:15:02: 		Build SHA1: 208270d8f2e007f1da109a12d2db741bb172ee8e
09/06/2016 15:15:02: 		Built by philly on bba8a3f9d1fe
09/06/2016 15:15:02: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
09/06/2016 15:15:02: -------------------------------------------------------------------
09/06/2016 15:15:03: -------------------------------------------------------------------
09/06/2016 15:15:03: GPU info:

09/06/2016 15:15:03: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/06/2016 15:15:03: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/06/2016 15:15:03: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/06/2016 15:15:03: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
09/06/2016 15:15:03: -------------------------------------------------------------------

09/06/2016 15:15:03: Running on localhost at 2016/09/06 15:15:03
09/06/2016 15:15:03: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config/02_Convolution.cntk  currentDirectory=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  RunDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu  DataDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  trainNetwork=[SGD=[maxEpochs=6]]


Configuration After Processing and Variable Resolution:

configparameters: 02_Convolution.cntk:command=trainNetwork:testNetwork
configparameters: 02_Convolution.cntk:configDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/02_Convolution/../../../../../../Examples/Image/MNIST/Config
configparameters: 02_Convolution.cntk:currentDirectory=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:dataDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:deviceId=0
configparameters: 02_Convolution.cntk:forceDeterministicAlgorithms=true
configparameters: 02_Convolution.cntk:modelDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models
configparameters: 02_Convolution.cntk:modelPath=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
configparameters: 02_Convolution.cntk:outputDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:precision=float
configparameters: 02_Convolution.cntk:rootDir=..
configparameters: 02_Convolution.cntk:RunDir=/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:stderr=-
configparameters: 02_Convolution.cntk:testNetwork=[
    action = test
minibatchSize = 1024    
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_Convolution.cntk:timestamping=true
configparameters: 02_Convolution.cntk:traceLevel=1
configparameters: 02_Convolution.cntk:trainNetwork=[
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
        featScale = Constant(1/256)
labelDim = 10                               
convWScale = 10                             
        model (features) = {
            featNorm = features.* featScale
            c1 = ConvolutionalLayer {16, (5:5), pad = true, initValueScale=convWScale} (featNorm)
			r1 = ReLU(c1)
            p1 = MaxPoolingLayer {(2:2), stride=(2:2)} (r1)
            c2 = ConvolutionalLayer {32, (5:5), pad = true, initValueScale=convWScale} (p1)
			r2 = ReLU(c2)
            p2 = MaxPoolingLayer {(2:2), stride=(2:2)} (r2)
            h1 = DenseLayer {128, activation=Sigmoid, init='uniform'} (p2)
            ol = LinearLayer {labelDim, init='uniform'} (h1)
        }.ol
        features = Input {imageShape}
        labels = Input {labelDim}
        ol = model (features)
        ce   = CrossEntropyWithSoftmax (labels, ol)
        errs = ClassificationError (labels, ol)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (ol)
    }
    SGD = [
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 15
        learningRatesPerSample = 0.001*5:0.0005
        momentumAsTimeConstant = 0*5:1024
        numMBsToShowResult = 500
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=6]]

09/06/2016 15:15:03: Commands: trainNetwork testNetwork
09/06/2016 15:15:03: Precision = "float"
09/06/2016 15:15:03: CNTKModelPath: /tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
09/06/2016 15:15:03: CNTKCommandTrainInfo: trainNetwork : 6
09/06/2016 15:15:03: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 6

09/06/2016 15:15:03: ##############################################################################
09/06/2016 15:15:03: #                                                                            #
09/06/2016 15:15:03: # Action "train"                                                             #
09/06/2016 15:15:03: #                                                                            #
09/06/2016 15:15:03: ##############################################################################

09/06/2016 15:15:03: CNTKCommandTrainBegin: trainNetwork

09/06/2016 15:15:03: Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[128 x 0] as uniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[32 x 0] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[16 x 0] as heNormal later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1] <- 0.003906.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 16] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 16] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[1 x 1 x 32] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[128] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[128] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.
Node '<placeholder>' (LearnableParameter operation): Initializing Parameter[10] <- 0.000000.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.ol.W = LearnableParameter() :  -> [10 x 0]
Validating --> ol.h1.arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 0]
Validating --> ol.c2.W = LearnableParameter() :  -> [32 x 0]
Validating --> ol.c1.W = LearnableParameter() :  -> [16 x 0]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [28 x 28 x 1 x *], [1 x 1] -> [28 x 28 x 1 x *]
Node 'ol.c1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 25].
Node 'ol.c1.W' (LearnableParameter operation): Initializing Parameter[16 x 25] <- heNormal(seed=4, init dims=[16 x 25], range=0.282843*10.000000, onCPU=true).
Validating --> ol.c1.c = Convolution (ol.c1.W, ol.featNorm) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> ol.c1.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.c1.res.x = Plus (ol.c1.c, ol.c1.b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> ol.r1 = RectifiedLinear (ol.c1.res.x) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> ol.p1 = Pooling (ol.r1) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'ol.c2.W' (LearnableParameter operation) operation: Tensor shape was inferred as [32 x 400].
Node 'ol.c2.W' (LearnableParameter operation): Initializing Parameter[32 x 400] <- heNormal(seed=3, init dims=[32 x 400], range=0.070711*10.000000, onCPU=true).
Validating --> ol.c2.c = Convolution (ol.c2.W, ol.p1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> ol.c2.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> ol.c2.res.x = Plus (ol.c2.c, ol.c2.b) : [14 x 14 x 32 x *], [1 x 1 x 32] -> [14 x 14 x 32 x *]
Validating --> ol.r2 = RectifiedLinear (ol.c2.res.x) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> ol.p2 = Pooling (ol.r2) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Node 'ol.h1.arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [128 x 7 x 7 x 32].
Node 'ol.h1.arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[128 x 7 x 7 x 32] <- uniform(seed=2, init dims=[128 x 1568], range=0.050000*1.000000, onCPU=true).
Validating --> ol.h1._.PlusArgs[0] = Times (ol.h1.arrayOfFunctions[0].W, ol.p2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> ol.h1.arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> ol.h1._ = Plus (ol.h1._.PlusArgs[0], ol.h1.arrayOfFunctions[0].b) : [128 x *], [128] -> [128 x *]
Validating --> ol.h1 = Sigmoid (ol.h1._) : [128 x *] -> [128 x *]
Node 'ol.ol.W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 128].
Node 'ol.ol.W' (LearnableParameter operation): Initializing Parameter[10 x 128] <- uniform(seed=1, init dims=[10 x 128], range=0.050000*1.000000, onCPU=true).
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.ol.b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *], [10 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

ol.c1.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.p1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.c2.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.p2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

09/06/2016 15:15:04: Created model with 27 nodes on GPU 0.

09/06/2016 15:15:04: Training criterion node(s):
09/06/2016 15:15:04: 	ce = CrossEntropyWithSoftmax

09/06/2016 15:15:04: Evaluation criterion node(s):
09/06/2016 15:15:04: 	errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 49 matrices, 29 are shared as 13, and 20 are not shared.

	{ ol.c1.W : [16 x 25] (gradient)
	  ol.c1.res.x : [28 x 28 x 16 x *] }
	{ ol.c1.c : [28 x 28 x 16 x *] (gradient)
	  ol.r1 : [28 x 28 x 16 x *] }
	{ ol.c1.res.x : [28 x 28 x 16 x *] (gradient)
	  ol.p1 : [14 x 14 x 16 x *] }
	{ ol.c1.b : [1 x 1 x 16] (gradient)
	  ol.r1 : [28 x 28 x 16 x *] (gradient) }
	{ ol.c2.W : [32 x 400] (gradient)
	  ol.c2.res.x : [14 x 14 x 32 x *] }
	{ ol.c2.c : [14 x 14 x 32 x *] (gradient)
	  ol.r2 : [14 x 14 x 32 x *] }
	{ ol.c2.res.x : [14 x 14 x 32 x *] (gradient)
	  ol.p1 : [14 x 14 x 16 x *] (gradient)
	  ol.p2 : [7 x 7 x 32 x *] }
	{ ol.c2.b : [1 x 1 x 32] (gradient)
	  ol.h1._.PlusArgs[0] : [128 x *]
	  ol.r2 : [14 x 14 x 32 x *] (gradient) }
	{ ol.h1._ : [128 x *]
	  ol.h1.arrayOfFunctions[0].W : [128 x 7 x 7 x 32] (gradient) }
	{ ol.h1 : [128 x *]
	  ol.h1._.PlusArgs[0] : [128 x *] (gradient) }
	{ ol.h1._ : [128 x *] (gradient)
	  ol.ol.PlusArgs[0] : [10 x *]
	  ol.p2 : [7 x 7 x 32 x *] (gradient) }
	{ ol : [10 x *] (gradient)
	  ol.ol.W : [10 x 128] (gradient) }
	{ ol.h1 : [128 x *] (gradient)
	  ol.h1.arrayOfFunctions[0].b : [128] (gradient) }


09/06/2016 15:15:04: Training 215370 parameters in 8 out of 8 parameter tensors and 22 nodes with gradient:

09/06/2016 15:15:04: 	Node 'ol.c1.W' (LearnableParameter operation) : [16 x 25]
09/06/2016 15:15:04: 	Node 'ol.c1.b' (LearnableParameter operation) : [1 x 1 x 16]
09/06/2016 15:15:04: 	Node 'ol.c2.W' (LearnableParameter operation) : [32 x 400]
09/06/2016 15:15:04: 	Node 'ol.c2.b' (LearnableParameter operation) : [1 x 1 x 32]
09/06/2016 15:15:04: 	Node 'ol.h1.arrayOfFunctions[0].W' (LearnableParameter operation) : [128 x 7 x 7 x 32]
09/06/2016 15:15:04: 	Node 'ol.h1.arrayOfFunctions[0].b' (LearnableParameter operation) : [128]
09/06/2016 15:15:04: 	Node 'ol.ol.W' (LearnableParameter operation) : [10 x 128]
09/06/2016 15:15:04: 	Node 'ol.ol.b' (LearnableParameter operation) : [10]

09/06/2016 15:15:04: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

09/06/2016 15:15:04: Starting Epoch 1: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/06/2016 15:15:04: Starting minibatch loop.
09/06/2016 15:15:07:  Epoch[ 1 of 6]-Minibatch[   1- 500, 53.33%]: ce = 1.84781897 * 32000; errs = 60.547% * 32000; time = 3.7529s; samplesPerSecond = 8526.8
09/06/2016 15:15:10: Finished Epoch[ 1 of 6]: [Training] ce = 1.61517708 * 60000; errs = 51.798% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.001; epochTime=6.15834s
09/06/2016 15:15:10: SGD: Saving checkpoint model '/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.1'

09/06/2016 15:15:10: Starting Epoch 2: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/06/2016 15:15:10: Starting minibatch loop.
09/06/2016 15:15:12:  Epoch[ 2 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.85908008 * 32000; errs = 24.256% * 32000; time = 2.7315s; samplesPerSecond = 11715.0
09/06/2016 15:15:15: Finished Epoch[ 2 of 6]: [Training] ce = 0.73774590 * 60000; errs = 20.563% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.001; epochTime=5.13257s
09/06/2016 15:15:15: SGD: Saving checkpoint model '/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.2'

09/06/2016 15:15:15: Starting Epoch 3: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/06/2016 15:15:15: Starting minibatch loop.
09/06/2016 15:15:18:  Epoch[ 3 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.42898010 * 32000; errs = 11.306% * 32000; time = 2.7372s; samplesPerSecond = 11691.0
09/06/2016 15:15:20: Finished Epoch[ 3 of 6]: [Training] ce = 0.37431650 * 60000; errs = 9.850% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.001; epochTime=5.13842s
09/06/2016 15:15:20: SGD: Saving checkpoint model '/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.3'

09/06/2016 15:15:20: Starting Epoch 4: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/06/2016 15:15:20: Starting minibatch loop.
09/06/2016 15:15:23:  Epoch[ 4 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.25720383 * 32000; errs = 7.228% * 32000; time = 2.7446s; samplesPerSecond = 11659.2
09/06/2016 15:15:25: Finished Epoch[ 4 of 6]: [Training] ce = 0.24201776 * 60000; errs = 6.860% * 60000; totalSamplesSeen = 240000; learningRatePerSample = 0.001; epochTime=5.14558s
09/06/2016 15:15:25: SGD: Saving checkpoint model '/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.4'

09/06/2016 15:15:25: Starting Epoch 5: learning rate per sample = 0.001000  effective momentum = 0.000000  momentum as time constant = 0.0 samples

09/06/2016 15:15:25: Starting minibatch loop.
09/06/2016 15:15:28:  Epoch[ 5 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.19681726 * 32000; errs = 5.794% * 32000; time = 2.7413s; samplesPerSecond = 11673.1
09/06/2016 15:15:30: Finished Epoch[ 5 of 6]: [Training] ce = 0.18575549 * 60000; errs = 5.403% * 60000; totalSamplesSeen = 300000; learningRatePerSample = 0.001; epochTime=5.13214s
09/06/2016 15:15:30: SGD: Saving checkpoint model '/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.5'

09/06/2016 15:15:30: Starting Epoch 6: learning rate per sample = 0.000500  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

09/06/2016 15:15:30: Starting minibatch loop.
09/06/2016 15:15:33:  Epoch[ 6 of 6]-Minibatch[   1- 500, 53.33%]: ce = 0.15090013 * 32000; errs = 4.337% * 32000; time = 2.7318s; samplesPerSecond = 11713.7
09/06/2016 15:15:36: Finished Epoch[ 6 of 6]: [Training] ce = 0.14278027 * 60000; errs = 4.203% * 60000; totalSamplesSeen = 360000; learningRatePerSample = 0.00050000002; epochTime=5.12315s
09/06/2016 15:15:36: SGD: Saving checkpoint model '/tmp/cntk-test-20160906151422.766743/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution'
09/06/2016 15:15:36: CNTKCommandTrainEnd: trainNetwork

09/06/2016 15:15:36: Action "train" complete.


09/06/2016 15:15:36: ##############################################################################
09/06/2016 15:15:36: #                                                                            #
09/06/2016 15:15:36: # Action "test"                                                              #
09/06/2016 15:15:36: #                                                                            #
09/06/2016 15:15:36: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> ol.h1.arrayOfFunctions[0].W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> ol.c2.W = LearnableParameter() :  -> [32 x 400]
Validating --> ol.c1.W = LearnableParameter() :  -> [16 x 25]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> ol.featNorm = ElementTimes (features, featScale) : [28 x 28 x 1 x *1], [1 x 1] -> [28 x 28 x 1 x *1]
Validating --> ol.c1.c = Convolution (ol.c1.W, ol.featNorm) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> ol.c1.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> ol.c1.res.x = Plus (ol.c1.c, ol.c1.b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> ol.r1 = RectifiedLinear (ol.c1.res.x) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> ol.p1 = Pooling (ol.r1) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> ol.c2.c = Convolution (ol.c2.W, ol.p1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> ol.c2.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> ol.c2.res.x = Plus (ol.c2.c, ol.c2.b) : [14 x 14 x 32 x *1], [1 x 1 x 32] -> [14 x 14 x 32 x *1]
Validating --> ol.r2 = RectifiedLinear (ol.c2.res.x) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> ol.p2 = Pooling (ol.r2) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> ol.h1._.PlusArgs[0] = Times (ol.h1.arrayOfFunctions[0].W, ol.p2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> ol.h1.arrayOfFunctions[0].b = LearnableParameter() :  -> [128]
Validating --> ol.h1._ = Plus (ol.h1._.PlusArgs[0], ol.h1.arrayOfFunctions[0].b) : [128 x *1], [128] -> [128 x *1]
Validating --> ol.h1 = Sigmoid (ol.h1._) : [128 x *1] -> [128 x *1]
Validating --> ol.ol.PlusArgs[0] = Times (ol.ol.W, ol.h1) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.ol.b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.ol.PlusArgs[0], ol.ol.b) : [10 x *1], [10] -> [10 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *1], [10 x *1] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *1], [10 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.

ol.c1.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.p1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.c2.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
ol.p2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 27 matrices, 0 are shared as 0, and 27 are not shared.


09/06/2016 15:15:36: Minibatch[1-10]: errs = 3.800% * 10000; ce = 0.12833034 * 10000
09/06/2016 15:15:36: Final Results: Minibatch[1-10]: errs = 3.800% * 10000; ce = 0.12833034 * 10000; perplexity = 1.13692852

09/06/2016 15:15:36: Action "test" complete.

09/06/2016 15:15:36: __COMPLETED__