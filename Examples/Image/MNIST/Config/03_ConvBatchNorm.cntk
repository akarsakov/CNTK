# Parameters can be overwritten on the command line
# for example: cntk configFile=myConfigFile rootDir=../.. 
# For running from Visual Studio add
# currentDirectory=$(SolutionDir)/<path to corresponding data folder> 

command = trainNetwork:testNetwork

precision = "float"; traceLevel = 1 ; deviceId = "auto"

rootDir = ".." ; configDir = "$rootDir$/Config" ; dataDir = "$rootDir$/Data" ;
outputDir = "$rootDir$/Output" ;

modelPath = "$outputDir$/Models/03_ConvBatchNorm"
stderr = "$outputDir$/03_ConvBatchNorm_bs_out"

# TRAINING CONFIG
trainNetwork = {
    action = "train"

    BrainScriptNetworkBuilder = {
        imageShape = 28:28:1                        # image dimensions, 1 channel only
        featScale = Constant(1/256)
        labelDim = 10                               # number of distinct labels
        convWScale = 10                             # the initial value scale for the conv layers

        # define a custom layer with 5x5 convolution, batch norm, relu and 2x2 max pooling
        ConvBnReluPool (x, depth, initValueScale) =
        {
            c = ConvolutionalLayer {depth, (5:5), pad=true, initValueScale=initValueScale} (x)
            b = BatchNormalizationLayer {spatialRank = 2, normalizationTimeConstant = 1024} (c)
            r = ReLU (b)
            p = MaxPoolingLayer {(2:2), stride = (2:2)} (r)
        }.p

        model (features) = {
            featNorm = features.* featScale
            
            cbnr1 = ConvBnReluPool(featNorm, 16, convWScale)
            cbnr2 = ConvBnReluPool(cbnr1,    32, convWScale)
            
            h1 = LinearLayer {128} (cbnr2)
            h1bn = BatchNormalizationLayer {normalizationTimeConstant = 1024} (h1)
            h1bnr = ReLU (h1bn)
            
            ol = LinearLayer {labelDim} (h1bnr)
        }.ol

        # inputs
        features = Input {imageShape}
        labels = Input {labelDim}

        # apply model to features
        ol = model (features)

        # loss and error computation
        ce   = CrossEntropyWithSoftmax (labels, ol)
        errs = ClassificationError (labels, ol)

        # declare special nodes
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (ol)
    }

    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 3
        learningRatesPerSample = 0.02:0.005
        momentumAsTimeConstant = 0
        
        numMBsToShowResult = 500
    }

    reader = {
        readerType = "CNTKTextFormatReader"
        # See ../REAMDE.md for details on getting the data (Train-28x28_cntk_text.txt).
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }    
}

# TEST CONFIG
testNetwork = {
    action = test
    minibatchSize = 1024    # reduce this if you run out of memory

    reader = {
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}
